// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PocketCalculator.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Square root")]
    public partial class SquareRootFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "square_root.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Square root", "Because let\'s face it, doing an iterative search for a\nsquare root is tedious eve" +
                    "n with a pocket calculator.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
  #line 6
    testRunner.Given("I have a pocket calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
    testRunner.And("it is turned on", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Square root of zero")]
        public virtual void SquareRootOfZero()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Square root of zero", ((string[])(null)));
#line 9
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 10
    testRunner.When("I press \"0 SQRT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
    testRunner.Then("the display shows \"0.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Square root of a square number")]
        [NUnit.Framework.CategoryAttribute("squareroot")]
        public virtual void SquareRootOfASquareNumber()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Square root of a square number", new string[] {
                        "squareroot"});
#line 14
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 15
    testRunner.When("I press \"1 6 9 SQRT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
    testRunner.Then("the display shows \"13.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Square root of a non-square number")]
        [NUnit.Framework.CategoryAttribute("squareroot")]
        [NUnit.Framework.CategoryAttribute("full")]
        public virtual void SquareRootOfANon_SquareNumber()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Square root of a non-square number", new string[] {
                        "squareroot",
                        "full"});
#line 19
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 20
    testRunner.When("I press \"9 9 SQRT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
    testRunner.Then("the display shows \"9.949874371\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Square root at the start of a calculation")]
        [NUnit.Framework.CategoryAttribute("squareroot")]
        public virtual void SquareRootAtTheStartOfACalculation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Square root at the start of a calculation", new string[] {
                        "squareroot"});
#line 24
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 25
    testRunner.When("I press \"2 5 SQRT + 6 =\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
    testRunner.Then("the display shows \"11.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Square root at the end of a calculation")]
        [NUnit.Framework.CategoryAttribute("squareroot")]
        public virtual void SquareRootAtTheEndOfACalculation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Square root at the end of a calculation", new string[] {
                        "squareroot"});
#line 29
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 30
    testRunner.When("I press \"5 + 3 6 SQRT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
    testRunner.Then("the display shows \"6.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
    testRunner.When("I press \"=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
    testRunner.Then("the display shows \"11.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Trying to make the square root of zero negative")]
        [NUnit.Framework.CategoryAttribute("squareroot")]
        public virtual void TryingToMakeTheSquareRootOfZeroNegative()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trying to make the square root of zero negative", new string[] {
                        "squareroot"});
#line 36
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 37
    testRunner.When("I press \"0 SQRT +/-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
    testRunner.Then("the display shows \"0.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Storing a square root calculation in memory")]
        [NUnit.Framework.CategoryAttribute("squareroot")]
        [NUnit.Framework.CategoryAttribute("memory")]
        public virtual void StoringASquareRootCalculationInMemory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Storing a square root calculation in memory", new string[] {
                        "squareroot",
                        "memory"});
#line 41
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 42
    testRunner.When("I press \"1 0 0 + 4 9 SQRT M+\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
    testRunner.Then("the display shows \"107.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
    testRunner.When("I press \"AC MR\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
    testRunner.Then("the display shows \"107.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
