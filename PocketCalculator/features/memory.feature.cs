// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PocketCalculator.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Memory")]
    public partial class MemoryFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "memory.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Memory", "Memory lets us accumulate an answer in stages and is persistent\neven if you press" +
                    " AC to reset the calculator.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
  #line 6
    testRunner.Given("I have a pocket calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
    testRunner.And("it is turned on", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding one number")]
        [NUnit.Framework.CategoryAttribute("memory")]
        public virtual void AddingOneNumber()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding one number", new string[] {
                        "memory"});
#line 12
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 13
    testRunner.When("I press \"1 2 3 M+\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
    testRunner.Then("the display shows \"123.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
    testRunner.When("I press \"AC MR\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
    testRunner.Then("the display shows \"123.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding two numbers")]
        [NUnit.Framework.CategoryAttribute("memory")]
        public virtual void AddingTwoNumbers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding two numbers", new string[] {
                        "memory"});
#line 19
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 20
    testRunner.When("I press \"1 2 3 M+ 4 5 6 M+\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
    testRunner.Then("the display shows \"456.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 22
    testRunner.When("I press \"MR\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
    testRunner.Then("the display shows \"579.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtracting one number")]
        [NUnit.Framework.CategoryAttribute("memory")]
        public virtual void SubtractingOneNumber()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtracting one number", new string[] {
                        "memory"});
#line 28
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 32
    testRunner.When("I press \"1 0 0 0 M+ AC\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
    testRunner.Then("the display shows \"0.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
    testRunner.When("I press \"1 2 3 M-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
    testRunner.Then("the display shows \"123.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
    testRunner.When("I press \"MR\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
    testRunner.Then("the display shows \"877.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtracting two numbers")]
        [NUnit.Framework.CategoryAttribute("memory")]
        public virtual void SubtractingTwoNumbers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtracting two numbers", new string[] {
                        "memory"});
#line 40
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 41
    testRunner.When("I press \"1 0 0 0 M+ AC\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
    testRunner.Then("the display shows \"0.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
    testRunner.When("I press \"1 2 3 M- 4 5 6 M-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
    testRunner.Then("the display shows \"456.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
    testRunner.When("I press \"MR\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
    testRunner.Then("the display shows \"421.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding then subtracting the same amount")]
        [NUnit.Framework.CategoryAttribute("memory")]
        public virtual void AddingThenSubtractingTheSameAmount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding then subtracting the same amount", new string[] {
                        "memory"});
#line 51
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 52
    testRunner.When("I press \"1 0 0 0 M+ AC\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
    testRunner.When("I press \"1 2 3 M+ 1 2 3 M-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
    testRunner.Then("the display shows \"123.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
    testRunner.When("I press \"MR\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
    testRunner.Then("the display shows \"1000.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding to the memory mid-calculation")]
        [NUnit.Framework.CategoryAttribute("memory")]
        public virtual void AddingToTheMemoryMid_Calculation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding to the memory mid-calculation", new string[] {
                        "memory"});
#line 61
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 67
    testRunner.When("I press \"1 2 3 M+ AC 4 5 6 + 7 8 9 M+\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
    testRunner.Then("the display shows \"1245.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 69
    testRunner.When("I press \"MR\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
    testRunner.Then("the display shows \"1368.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtracting from the memory mid-calculation")]
        [NUnit.Framework.CategoryAttribute("memory")]
        public virtual void SubtractingFromTheMemoryMid_Calculation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtracting from the memory mid-calculation", new string[] {
                        "memory"});
#line 73
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 78
    testRunner.When("I press \"7 8 9 M+ AC 4 5 6 + 1 2 3 M-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 79
    testRunner.Then("the display shows \"579.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 80
    testRunner.When("I press \"MR\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 81
    testRunner.Then("the display shows \"210.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Memory recalling an empty memory")]
        public virtual void MemoryRecallingAnEmptyMemory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Memory recalling an empty memory", ((string[])(null)));
#line 85
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 88
    testRunner.When("I press \"MR +/-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
    testRunner.Then("the display shows \"0.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Memory recalling a non-zero value")]
        [NUnit.Framework.CategoryAttribute("negative")]
        public virtual void MemoryRecallingANon_ZeroValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Memory recalling a non-zero value", new string[] {
                        "negative"});
#line 92
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 95
    testRunner.When("I press \"1 2 3 M+ AC MR +/-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 96
    testRunner.Then("the display shows \"-123.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Trying to recall zero to make negative zero")]
        public virtual void TryingToRecallZeroToMakeNegativeZero()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trying to recall zero to make negative zero", ((string[])(null)));
#line 98
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 101
    testRunner.When("I press \"0 M+ AC MR +/-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
    testRunner.Then("the display shows \"0.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Trying to build up and recall zero to make negative zero")]
        public virtual void TryingToBuildUpAndRecallZeroToMakeNegativeZero()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trying to build up and recall zero to make negative zero", ((string[])(null)));
#line 104
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 107
    testRunner.When("I press \"1 2 3 M+ 1 0 0 M- 2 3 M- AC MR +/-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
    testRunner.Then("the display shows \"0.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
