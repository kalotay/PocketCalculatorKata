// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PocketCalculator.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Entering decimals")]
    public partial class EnteringDecimalsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "entering_decimals.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Entering decimals", "As with entering integers, here we only care that the\ndisplay is correct.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
  #line 6
    testRunner.Given("I have a pocket calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
    testRunner.And("it is turned on", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pressing \".\" after a few digits")]
        public virtual void Pressing_AfterAFewDigits()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pressing \".\" after a few digits", ((string[])(null)));
#line 9
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 10
    testRunner.When("I press \"1 2 3 .\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
    testRunner.Then("the display shows \"123.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Entering decimal places")]
        [NUnit.Framework.CategoryAttribute("decimal")]
        public virtual void EnteringDecimalPlaces()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Entering decimal places", new string[] {
                        "decimal"});
#line 14
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 15
    testRunner.When("I press \"1 2 3 . 4 5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
    testRunner.Then("the display shows \"123.45\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Repeatedly pressing \".\"")]
        [NUnit.Framework.CategoryAttribute("decimal")]
        public virtual void RepeatedlyPressing_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Repeatedly pressing \".\"", new string[] {
                        "decimal"});
#line 19
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 20
    testRunner.When("I press \"1 2 3 . . 4 5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
    testRunner.Then("the display shows \"123.45\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Truncating trailing decimal zeros after equals")]
        [NUnit.Framework.CategoryAttribute("decimal")]
        public virtual void TruncatingTrailingDecimalZerosAfterEquals()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Truncating trailing decimal zeros after equals", new string[] {
                        "decimal"});
#line 24
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 25
    testRunner.When("I press \"1 2 3 . 0 1 0 =\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
    testRunner.Then("the display shows \"123.01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Truncating trailing decimal zeros after an operator")]
        [NUnit.Framework.CategoryAttribute("decimal")]
        [NUnit.Framework.TestCaseAttribute("+", null)]
        [NUnit.Framework.TestCaseAttribute("-", null)]
        [NUnit.Framework.TestCaseAttribute("*", null)]
        [NUnit.Framework.TestCaseAttribute("/", null)]
        public virtual void TruncatingTrailingDecimalZerosAfterAnOperator(string @operator, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "decimal"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Truncating trailing decimal zeros after an operator", @__tags);
#line 29
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 30
    testRunner.When(string.Format("I press \"1 2 3 . 0 1 0 {0}\"", @operator), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
    testRunner.Then("the display shows \"123.01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pressing \".\" without entering a leading zero")]
        [NUnit.Framework.CategoryAttribute("decimal")]
        public virtual void Pressing_WithoutEnteringALeadingZero()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pressing \".\" without entering a leading zero", new string[] {
                        "decimal"});
#line 41
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 44
    testRunner.When("I press \". 0 0 0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
    testRunner.Then("the display shows \"0.000\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Truncating trailing decimal zeros from an integer")]
        [NUnit.Framework.CategoryAttribute("decimal")]
        public virtual void TruncatingTrailingDecimalZerosFromAnInteger()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Truncating trailing decimal zeros from an integer", new string[] {
                        "decimal"});
#line 48
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 49
    testRunner.When("I press \"1 2 3 . 0 0 0 =\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
    testRunner.Then("the display shows \"123.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Truncating trailing decimal zeros from an integer after an operator")]
        [NUnit.Framework.TestCaseAttribute("+", null)]
        [NUnit.Framework.TestCaseAttribute("-", null)]
        [NUnit.Framework.TestCaseAttribute("*", null)]
        [NUnit.Framework.TestCaseAttribute("/", null)]
        public virtual void TruncatingTrailingDecimalZerosFromAnIntegerAfterAnOperator(string @operator, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Truncating trailing decimal zeros from an integer after an operator", exampleTags);
#line 52
  this.ScenarioSetup(scenarioInfo);
#line 5
  this.FeatureBackground();
#line 53
    testRunner.When(string.Format("I press \"1 2 3 . 0 0 0 {0}\"", @operator), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
    testRunner.Then("the display shows \"123.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
