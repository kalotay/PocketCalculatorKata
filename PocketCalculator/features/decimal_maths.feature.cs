// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PocketCalculator.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Decimal maths")]
    public partial class DecimalMathsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "decimal_maths.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Decimal maths", "Decimal maths is the same as integer maths, except it uses... decimals.\nWe will a" +
                    "ssume that all the other properties of the operations hold for\ndecimals, and tha" +
                    "t the calculator doesn\'t have an entire duplicate\ncomputation unit for fractiona" +
                    "l numbers.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
  #line 8
    testRunner.Given("I have a pocket calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
    testRunner.And("it is turned on", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Basic addition")]
        [NUnit.Framework.CategoryAttribute("decimal")]
        public virtual void BasicAddition()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Basic addition", new string[] {
                        "decimal"});
#line 12
  this.ScenarioSetup(scenarioInfo);
#line 7
  this.FeatureBackground();
#line 13
    testRunner.When("I press \"1 2 . 3 4 + 5 6 . 7 8 =\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
    testRunner.Then("the display shows \"69.12\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Basic subtraction")]
        [NUnit.Framework.CategoryAttribute("decimal")]
        public virtual void BasicSubtraction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Basic subtraction", new string[] {
                        "decimal"});
#line 17
  this.ScenarioSetup(scenarioInfo);
#line 7
  this.FeatureBackground();
#line 18
    testRunner.When("I press \"5 6 . 7 8 - 1 2 . 3 4 =\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
    testRunner.Then("the display shows \"44.44\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Basic multiplication")]
        [NUnit.Framework.CategoryAttribute("decimal")]
        public virtual void BasicMultiplication()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Basic multiplication", new string[] {
                        "decimal"});
#line 22
  this.ScenarioSetup(scenarioInfo);
#line 7
  this.FeatureBackground();
#line 23
    testRunner.When("I press \"1 2 . 3 4 * 5 6 . 7 8 =\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
    testRunner.Then("the display shows \"700.6652\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Basic division")]
        [NUnit.Framework.CategoryAttribute("decimal")]
        public virtual void BasicDivision()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Basic division", new string[] {
                        "decimal"});
#line 27
  this.ScenarioSetup(scenarioInfo);
#line 7
  this.FeatureBackground();
#line 28
    testRunner.When("I press \"0 . 5 6 / 0 . 7 =\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
    testRunner.Then("the display shows \"0.8\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Truncation")]
        [NUnit.Framework.CategoryAttribute("decimal")]
        [NUnit.Framework.CategoryAttribute("full")]
        public virtual void Truncation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Truncation", new string[] {
                        "decimal",
                        "full"});
#line 32
  this.ScenarioSetup(scenarioInfo);
#line 7
  this.FeatureBackground();
#line 36
    testRunner.When("I press \"1 / 7 =\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
    testRunner.Then("the display shows \"0.142857142\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
