// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PocketCalculator.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Entering negative integers")]
    public partial class EnteringNegativeIntegersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "negative_integers.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Entering negative integers", "It\'s important that the display shows the right thing as\nwe enter numbers. We don" +
                    "\'t care here about any calculations,\njust that the display is updating correctly" +
                    ".", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line 7
    testRunner.Given("I have a pocket calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
    testRunner.And("it is turned on", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Entering a negative number")]
        [NUnit.Framework.CategoryAttribute("negative")]
        public virtual void EnteringANegativeNumber()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Entering a negative number", new string[] {
                        "negative"});
#line 11
  this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 12
    testRunner.When("I press \"1 2 3 +/-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
    testRunner.Then("the display shows \"-123.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Entering a negative number by pressing \"+/-\" half way through")]
        [NUnit.Framework.CategoryAttribute("negative")]
        public virtual void EnteringANegativeNumberByPressing_HalfWayThrough()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Entering a negative number by pressing \"+/-\" half way through", new string[] {
                        "negative"});
#line 16
  this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 17
    testRunner.When("I press \"1 2 +/- 3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
    testRunner.Then("the display shows \"-123.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Entering a negative number and pressing \"=\"")]
        [NUnit.Framework.CategoryAttribute("negative")]
        public virtual void EnteringANegativeNumberAndPressing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Entering a negative number and pressing \"=\"", new string[] {
                        "negative"});
#line 21
  this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 22
    testRunner.When("I press \"1 2 3 +/- =\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
    testRunner.Then("the display shows \"-123.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Entering a negative number by pressing \"+/-\" half way through, then pressing \"=\"")]
        [NUnit.Framework.CategoryAttribute("negative")]
        public virtual void EnteringANegativeNumberByPressing_HalfWayThroughThenPressing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Entering a negative number by pressing \"+/-\" half way through, then pressing \"=\"", new string[] {
                        "negative"});
#line 26
  this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 27
    testRunner.When("I press \"1 2 +/- 3 =\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
    testRunner.Then("the display shows \"-123.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Making a negative number positive")]
        public virtual void MakingANegativeNumberPositive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Making a negative number positive", ((string[])(null)));
#line 30
  this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 31
    testRunner.When("I press \"1 2 3 +/- +/-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
    testRunner.Then("the display shows \"123.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pressing +/- after an operator")]
        [NUnit.Framework.CategoryAttribute("negative")]
        [NUnit.Framework.TestCaseAttribute("+", null)]
        [NUnit.Framework.TestCaseAttribute("-", null)]
        [NUnit.Framework.TestCaseAttribute("*", null)]
        [NUnit.Framework.TestCaseAttribute("/", null)]
        public virtual void Pressing_AfterAnOperator(string @operator, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "negative"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pressing +/- after an operator", @__tags);
#line 35
  this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 36
    testRunner.When(string.Format("I press \"1 2 3 {0} +/-\"", @operator), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
    testRunner.Then("the display shows \"-123.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
    testRunner.When("I press \"7\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
    testRunner.Then("the display shows \"7.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pressing +/- after =")]
        [NUnit.Framework.CategoryAttribute("negative")]
        public virtual void Pressing_After()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pressing +/- after =", new string[] {
                        "negative"});
#line 49
  this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 50
    testRunner.When("I press \"1 2 3 = +/-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
    testRunner.Then("the display shows \"-123.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pressing +/- after = where the number is zero")]
        public virtual void Pressing_AfterWhereTheNumberIsZero()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pressing +/- after = where the number is zero", ((string[])(null)));
#line 53
  this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 54
    testRunner.When("I press \"0 = +/-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
    testRunner.Then("the display shows \"0.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Negative nothing")]
        public virtual void NegativeNothing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative nothing", ((string[])(null)));
#line 57
  this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 61
    testRunner.When("I press \"+/-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
    testRunner.Then("the display shows \"0.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Negative zero")]
        [NUnit.Framework.CategoryAttribute("negative")]
        public virtual void NegativeZero()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative zero", new string[] {
                        "negative"});
#line 65
  this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 69
    testRunner.When("I press \"0 +/-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
    testRunner.Then("the display shows \"-0.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
